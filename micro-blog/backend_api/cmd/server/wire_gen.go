// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/devexps/go-examples/micro-blog/api/gen/go/common/conf"
	"github.com/devexps/go-examples/micro-blog/backend_api/internal/data"
	"github.com/devexps/go-examples/micro-blog/backend_api/internal/server"
	"github.com/devexps/go-examples/micro-blog/backend_api/internal/service"
	"github.com/devexps/go-micro/v2"
	"github.com/devexps/go-micro/v2/log"
	"github.com/devexps/go-micro/v2/registry"
)

// Injectors from wire.go:

// initApp init micro application.
func initApp(logger log.Logger, registrar registry.Registrar, bootstrap *conf.Bootstrap) (*micro.App, func(), error) {
	discovery := data.NewDiscovery(bootstrap)
	tokenServiceClient := data.NewTokenServiceClient(bootstrap, discovery)
	authenticator := data.NewAuthenticator(tokenServiceClient)
	casbinServiceClient := data.NewCasbinServiceClient(bootstrap, discovery)
	authorizer := data.NewAuthorizer(casbinServiceClient)
	v := server.NewMiddlewares(logger, authenticator, authorizer)
	userServiceClient := data.NewUserServiceClient(bootstrap, discovery)
	authenticationService := service.NewAuthenticationService(logger, userServiceClient, tokenServiceClient)
	httpServer := server.NewHTTPServer(bootstrap, v, authenticationService)
	grpcServer := server.NewGRPCServer(bootstrap, v, authenticationService)
	app := newApp(logger, httpServer, grpcServer, registrar)
	return app, func() {
	}, nil
}
